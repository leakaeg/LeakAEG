diff --git a/mm/kasan/report.c b/mm/kasan/report.c
index 410c8235e671..5a517dafb174 100644
--- a/mm/kasan/report.c
+++ b/mm/kasan/report.c
@@ -327,13 +327,16 @@ void kasan_report_double_free(struct kmem_cache *cache, void *object,
 {
 	unsigned long flags;
 
-	kasan_start_report(&flags);
+	//kasan_start_report(&flags);
+	pr_err("[X] Double Free Cache Name : %s, PTR : %llX\n", cache->name, object);
+	/*
 	pr_err("BUG: KASAN: double-free or invalid-free in %pS\n", ip);
 	pr_err("\n");
 	print_address_description(object);
 	pr_err("\n");
 	print_shadow_for_address(object);
-	kasan_end_report(&flags);
+	*/
+	//kasan_end_report(&flags);
 }
 
 static void kasan_report_error(struct kasan_access_info *info)
@@ -406,7 +409,92 @@ void kasan_report(unsigned long addr, size_t size,
 	info.is_write = is_write;
 	info.ip = ip;
 
+	/*
 	kasan_report_error(&info);
+	*/
+     if(strstr(current->comm, "poc") || strstr(current->comm, "syz-executor"))
+      {
+      int i = 0;
+              char *buf = kmalloc(size * 4 + 10, GFP_KERNEL);
+              memset(buf, 0, size * 4 + 10);
+              sprintf(buf, "%02X", ((uint8_t *)addr)[0]);
+              for(i = 1 ; i < size; i++)
+              {
+                      snprintf(buf, size * 4 + 10, "%s %02X", buf, ((uint8_t *)addr)[i]);
+              }
+	      struct page *page = (struct page *)0;
+	      if ((addr >= (void *)PAGE_OFFSET) && (addr < high_memory))
+	      {
+              	     page = virt_to_head_page(addr);
+	      }
+
+              if (page && PageSlab(page))
+              {
+                      struct kmem_cache *cache = page->slab_cache;
+                      void *object = nearest_obj(cache, page, addr);
+                      uint16_t *objtype = (uint16_t *)(kasan_mem_to_shadow(object));
+                      struct page *val_page = 0;
+                      struct kmem_cache *val_cache = 0;
+
+                      if(size == 8)
+                      {
+			      if ((*(uint64_t *)addr >= (void *)PAGE_OFFSET) && (*(uint64_t *)addr < high_memory))
+			      {
+					val_page = virt_to_head_page(*(uint64_t *)addr);
+			      }
+                      }
+
+                      if(size == 8 && val_page && PageSlab(val_page))
+                      {
+                              val_cache = val_page->slab_cache;
+			      if(is_write)
+			      {
+				      pr_err("[X] Store Size : %d, Cache Name : %s, Cache Size : %d, PTR : %llX, Offset : %d-%d Data: PTR %s [%llX]\n",
+                               		      size, cache->name, cache->object_size,
+                                              (uint64_t)object, (uint64_t)addr - (uint64_t)object,
+                                              (uint64_t)addr + (uint64_t)size - (uint64_t)object, val_cache->name, *(uint64_t *)addr);
+			      }
+			      else
+			      {
+				      pr_err("[X] Load Size : %d, Cache Name : %s, Cache Size : %d, PTR : %llX, Offset : %d-%d Data: PTR %s [%llX]\n",
+                               		      size, cache->name, cache->object_size,
+                                              (uint64_t)object, (uint64_t)addr - (uint64_t)object,
+                                              (uint64_t)addr + (uint64_t)size - (uint64_t)object, val_cache->name, *(uint64_t *)addr);
+			      }
+                      }
+                     else
+                      {
+			      if(is_write)
+			      {
+				      pr_err("[X] Store Size : %d, Cache Name : %s, Cache Size : %d, PTR : %llX, Offset : %d-%d Data: VALUE [%s]\n",
+					      size, cache->name, cache->object_size,
+					      (uint64_t)object, (uint64_t)addr - (uint64_t)object,
+					      (uint64_t)addr + (uint64_t)size - (uint64_t)object, buf);
+			      }
+			      else
+			      {
+				      pr_err("[X] Load Size : %d, Cache Name : %s, Cache Size : %d, PTR : %llX, Offset : %d-%d Data: VALUE [%s]\n",
+					      size, cache->name, cache->object_size,
+					      (uint64_t)object, (uint64_t)addr - (uint64_t)object,
+					      (uint64_t)addr + (uint64_t)size - (uint64_t)object, buf);
+			      }
+                      }
+              }
+              else if (page)
+              {
+		      if(is_write)
+		      {
+			      pr_err("[X] Store Size: %d, Local Variable, PTR : %llX, Data: VALUE [%s]\n",
+				      size, addr, buf);
+		      }
+		      else
+		      {
+			      pr_err("[X] Load Size: %d, Local Variable, PTR : %llX, Data: VALUE [%s]\n",
+				      size, addr, buf);
+		      }
+              }
+              kfree(buf);
+      }
 }
 
 
